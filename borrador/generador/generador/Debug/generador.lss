
generador.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000983  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ac  00000000  00000000  00000ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b8  00000000  00000000  0000147b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001734  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044f  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000de  00000000  00000000  00001c83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001d61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <testUnaFrecuencia>:
		 _delay_ms(1);
	 }
 }
 */
/* Test mSe probara una  frecuencias recibida por valor*/
void testUnaFrecuencia(uint16_t frecuencia){
  80:	cf 93       	push	r28
  82:	c8 2f       	mov	r28, r24
	TIMER1_set_module();
  84:	0e 94 6d 00 	call	0xda	; 0xda <TIMER1_set_module>
//	char text[2];
	//sprintf(text, "%u", frecuencia);
	TIMER1_set_tiempo(frecuencia);
  88:	8c 2f       	mov	r24, r28
  8a:	0e 94 79 00 	call	0xf2	; 0xf2 <TIMER1_set_tiempo>
	TIMER1_set_on();
  8e:	0e 94 83 00 	call	0x106	; 0x106 <TIMER1_set_on>
	//while (1);
}
  92:	cf 91       	pop	r28
  94:	08 95       	ret

00000096 <main>:
int main(void)
{
	//testTodasLasFrecuencias();
	//testPolicia();
	testUnaFrecuencia(100);
  96:	84 e6       	ldi	r24, 0x64	; 100
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 40 00 	call	0x80	; 0x80 <testUnaFrecuencia>
}
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	08 95       	ret

000000a4 <setTopeDelContador>:
	return 1;
	}
	return 0;
}
void	setModeCTCnoPreescaler(){
	TCCR1B=(1<<WGM12)|(1<<CS10); //Modo CTC no prescaler
  a4:	9c 01       	movw	r18, r24
  a6:	24 56       	subi	r18, 0x64	; 100
  a8:	31 09       	sbc	r19, r1
  aa:	2d 3a       	cpi	r18, 0xAD	; 173
  ac:	36 42       	sbci	r19, 0x26	; 38
  ae:	98 f4       	brcc	.+38     	; 0xd6 <setTopeDelContador+0x32>
  b0:	9c 01       	movw	r18, r24
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	72 e1       	ldi	r23, 0x12	; 18
  be:	8a e7       	ldi	r24, 0x7A	; 122
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 a1 00 	call	0x142	; 0x142 <__divmodsi4>
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	31 09       	sbc	r19, r1
  ca:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  ce:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	08 95       	ret
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	08 95       	ret

000000da <TIMER1_set_module>:
/****************************************************************
funciones de acceso publicas
*****************************************************************/
void	TIMER1_set_module(){
	
	DDR=0x01;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	8a b9       	out	0x0a, r24	; 10
	
	setTopeDelContador(F_defecto);
  de:	83 e2       	ldi	r24, 0x23	; 35
  e0:	99 e1       	ldi	r25, 0x19	; 25
  e2:	0e 94 52 00 	call	0xa4	; 0xa4 <setTopeDelContador>

/***************************************************************
Funciones globales pero privadas al archivo TIMER1.c
****************************************************************/
void	setOutPB1(){
	DDRB=(1<<PB1); //PB1=salida | El puerto PB1 es el OC1A
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	84 b9       	out	0x04, r24	; 4
}
void	setModeTogle(){
	TCCR1A=(1<<COM1A0); //COM1A=Togle  no funciona en modo PWM
  ea:	80 e4       	ldi	r24, 0x40	; 64
  ec:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  f0:	08 95       	ret

000000f2 <TIMER1_set_tiempo>:
	setTopeDelContador(F_defecto);
	setOutPB1();
	setModeTogle();
	} 
uint8_t  TIMER1_set_tiempo(uint8_t tiempo ){
	return setTopeDelContador(1/tiempo);		
  f2:	68 2f       	mov	r22, r24
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 8d 00 	call	0x11a	; 0x11a <__divmodhi4>
  fe:	cb 01       	movw	r24, r22
 100:	0e 94 52 00 	call	0xa4	; 0xa4 <setTopeDelContador>
}
 104:	08 95       	ret

00000106 <TIMER1_set_on>:
	return 1;
	}
	return 0;
}
void	setModeCTCnoPreescaler(){
	TCCR1B=(1<<WGM12)|(1<<CS10); //Modo CTC no prescaler
 106:	89 e0       	ldi	r24, 0x09	; 9
 108:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	return setTopeDelContador(1/tiempo);		
}
void	TIMER1_set_on(){	
	setModeCTCnoPreescaler();
	while(1){
		PORT^=(PORTB&(1<<PB1))<<1; //setea la salida del PB1 a el bit correspondiente
 10c:	85 b1       	in	r24, 0x05	; 5
 10e:	9b b1       	in	r25, 0x0b	; 11
 110:	82 70       	andi	r24, 0x02	; 2
 112:	88 0f       	add	r24, r24
 114:	89 27       	eor	r24, r25
 116:	8b b9       	out	0x0b, r24	; 11
 118:	f9 cf       	rjmp	.-14     	; 0x10c <TIMER1_set_on+0x6>

0000011a <__divmodhi4>:
 11a:	97 fb       	bst	r25, 7
 11c:	07 2e       	mov	r0, r23
 11e:	16 f4       	brtc	.+4      	; 0x124 <__divmodhi4+0xa>
 120:	00 94       	com	r0
 122:	07 d0       	rcall	.+14     	; 0x132 <__divmodhi4_neg1>
 124:	77 fd       	sbrc	r23, 7
 126:	09 d0       	rcall	.+18     	; 0x13a <__divmodhi4_neg2>
 128:	0e 94 c0 00 	call	0x180	; 0x180 <__udivmodhi4>
 12c:	07 fc       	sbrc	r0, 7
 12e:	05 d0       	rcall	.+10     	; 0x13a <__divmodhi4_neg2>
 130:	3e f4       	brtc	.+14     	; 0x140 <__divmodhi4_exit>

00000132 <__divmodhi4_neg1>:
 132:	90 95       	com	r25
 134:	81 95       	neg	r24
 136:	9f 4f       	sbci	r25, 0xFF	; 255
 138:	08 95       	ret

0000013a <__divmodhi4_neg2>:
 13a:	70 95       	com	r23
 13c:	61 95       	neg	r22
 13e:	7f 4f       	sbci	r23, 0xFF	; 255

00000140 <__divmodhi4_exit>:
 140:	08 95       	ret

00000142 <__divmodsi4>:
 142:	05 2e       	mov	r0, r21
 144:	97 fb       	bst	r25, 7
 146:	1e f4       	brtc	.+6      	; 0x14e <__divmodsi4+0xc>
 148:	00 94       	com	r0
 14a:	0e 94 b8 00 	call	0x170	; 0x170 <__negsi2>
 14e:	57 fd       	sbrc	r21, 7
 150:	07 d0       	rcall	.+14     	; 0x160 <__divmodsi4_neg2>
 152:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__udivmodsi4>
 156:	07 fc       	sbrc	r0, 7
 158:	03 d0       	rcall	.+6      	; 0x160 <__divmodsi4_neg2>
 15a:	4e f4       	brtc	.+18     	; 0x16e <__divmodsi4_exit>
 15c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__negsi2>

00000160 <__divmodsi4_neg2>:
 160:	50 95       	com	r21
 162:	40 95       	com	r20
 164:	30 95       	com	r19
 166:	21 95       	neg	r18
 168:	3f 4f       	sbci	r19, 0xFF	; 255
 16a:	4f 4f       	sbci	r20, 0xFF	; 255
 16c:	5f 4f       	sbci	r21, 0xFF	; 255

0000016e <__divmodsi4_exit>:
 16e:	08 95       	ret

00000170 <__negsi2>:
 170:	90 95       	com	r25
 172:	80 95       	com	r24
 174:	70 95       	com	r23
 176:	61 95       	neg	r22
 178:	7f 4f       	sbci	r23, 0xFF	; 255
 17a:	8f 4f       	sbci	r24, 0xFF	; 255
 17c:	9f 4f       	sbci	r25, 0xFF	; 255
 17e:	08 95       	ret

00000180 <__udivmodhi4>:
 180:	aa 1b       	sub	r26, r26
 182:	bb 1b       	sub	r27, r27
 184:	51 e1       	ldi	r21, 0x11	; 17
 186:	07 c0       	rjmp	.+14     	; 0x196 <__udivmodhi4_ep>

00000188 <__udivmodhi4_loop>:
 188:	aa 1f       	adc	r26, r26
 18a:	bb 1f       	adc	r27, r27
 18c:	a6 17       	cp	r26, r22
 18e:	b7 07       	cpc	r27, r23
 190:	10 f0       	brcs	.+4      	; 0x196 <__udivmodhi4_ep>
 192:	a6 1b       	sub	r26, r22
 194:	b7 0b       	sbc	r27, r23

00000196 <__udivmodhi4_ep>:
 196:	88 1f       	adc	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	5a 95       	dec	r21
 19c:	a9 f7       	brne	.-22     	; 0x188 <__udivmodhi4_loop>
 19e:	80 95       	com	r24
 1a0:	90 95       	com	r25
 1a2:	bc 01       	movw	r22, r24
 1a4:	cd 01       	movw	r24, r26
 1a6:	08 95       	ret

000001a8 <__udivmodsi4>:
 1a8:	a1 e2       	ldi	r26, 0x21	; 33
 1aa:	1a 2e       	mov	r1, r26
 1ac:	aa 1b       	sub	r26, r26
 1ae:	bb 1b       	sub	r27, r27
 1b0:	fd 01       	movw	r30, r26
 1b2:	0d c0       	rjmp	.+26     	; 0x1ce <__udivmodsi4_ep>

000001b4 <__udivmodsi4_loop>:
 1b4:	aa 1f       	adc	r26, r26
 1b6:	bb 1f       	adc	r27, r27
 1b8:	ee 1f       	adc	r30, r30
 1ba:	ff 1f       	adc	r31, r31
 1bc:	a2 17       	cp	r26, r18
 1be:	b3 07       	cpc	r27, r19
 1c0:	e4 07       	cpc	r30, r20
 1c2:	f5 07       	cpc	r31, r21
 1c4:	20 f0       	brcs	.+8      	; 0x1ce <__udivmodsi4_ep>
 1c6:	a2 1b       	sub	r26, r18
 1c8:	b3 0b       	sbc	r27, r19
 1ca:	e4 0b       	sbc	r30, r20
 1cc:	f5 0b       	sbc	r31, r21

000001ce <__udivmodsi4_ep>:
 1ce:	66 1f       	adc	r22, r22
 1d0:	77 1f       	adc	r23, r23
 1d2:	88 1f       	adc	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	1a 94       	dec	r1
 1d8:	69 f7       	brne	.-38     	; 0x1b4 <__udivmodsi4_loop>
 1da:	60 95       	com	r22
 1dc:	70 95       	com	r23
 1de:	80 95       	com	r24
 1e0:	90 95       	com	r25
 1e2:	9b 01       	movw	r18, r22
 1e4:	ac 01       	movw	r20, r24
 1e6:	bd 01       	movw	r22, r26
 1e8:	cf 01       	movw	r24, r30
 1ea:	08 95       	ret

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
