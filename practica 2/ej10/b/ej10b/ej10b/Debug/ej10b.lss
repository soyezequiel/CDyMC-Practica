
ej10b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000016c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000791  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e7  00000000  00000000  000009bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fc  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  000013a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003be  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008a  00000000  00000000  000017de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
 */ 

#include "TIMER.h"

int main(void){
	DDRB=0x01;
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	84 b9       	out	0x04, r24	; 4
	while(1){
		TIMER_retardo_ms(100);
  94:	84 e6       	ldi	r24, 0x64	; 100
  96:	0e 94 5c 00 	call	0xb8	; 0xb8 <TIMER_retardo_ms>
		PORTB^=0x01;
  9a:	95 b1       	in	r25, 0x05	; 5
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	89 27       	eor	r24, r25
  a0:	85 b9       	out	0x05, r24	; 5
  a2:	f8 cf       	rjmp	.-16     	; 0x94 <main+0x4>

000000a4 <TIMER0_interrupt_1ms_init>:

//En cada interrupcion se incrementara el tiempo transcurrido en una unidad, en este caso una unidad es igual a 1ms	
void TIMER0_interrupt_1ms_init(){
	//Configuracion del TIMER0
	//Registros de configuracion
	TCCR0A=0x02;			//Modo CTC, clk interno
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	84 bd       	out	0x24, r24	; 36
	//TCCR0A=0x00;			//Modo Normal, CLK interno, con preescalador de 1024
	TCCR0B=0x03;			// con preescalador en 64
  a8:	93 e0       	ldi	r25, 0x03	; 3
  aa:	95 bd       	out	0x25, r25	; 37
	
	//OCR0A=124;				//use con 124 ciclos porque el lo que en la practica me dio mejores resultados
	//Calcula los ciclos nesesarios para generar una interrupcion cada 1ms
	long int calcular_ciclos=F_CPU/1000; calcular_ciclos/=64;
	
	OCR0A=(uint8_t) calcular_ciclos;
  ac:	9d e7       	ldi	r25, 0x7D	; 125
  ae:	97 bd       	out	0x27, r25	; 39
	
	
	//Bandera de notificacion
	TIFR0=(1<< OCF0A);				//notificacion cuando hay overflow
  b0:	85 bb       	out	0x15, r24	; 21
	
	//Configuracion de interrupciones
	TIMSK0=(1<< OCIE0A);	//Habilita la interrupcion cuando el contador llega a igualar el comparador
  b2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
  b6:	08 95       	ret

000000b8 <TIMER_retardo_ms>:
	//TIMSK0=(1<< TOIE0);		//Habilita la interrupcion cuando el contador hace overflow
}

void TIMER_retardo_ms(uint8_t Tiempo_a_cumplir)
{
  b8:	cf 93       	push	r28
  ba:	c8 2f       	mov	r28, r24
	ms_transcurridos=0;
  bc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	TIMER0_interrupt_1ms_init();	
  c0:	0e 94 52 00 	call	0xa4	; 0xa4 <TIMER0_interrupt_1ms_init>
	sei();
  c4:	78 94       	sei
	while (ms_transcurridos < Tiempo_a_cumplir ){}		
  c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ca:	8c 17       	cp	r24, r28
  cc:	e0 f3       	brcs	.-8      	; 0xc6 <TIMER_retardo_ms+0xe>
	
}
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <__vector_14>:
{
	cont=cont+1;
}
*/
ISR(TIMER0_COMPA_vect)	//El vector de interrupcion es la comparacion del "Canal A" del "Timer 0"
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
	ms_transcurridos+=1;
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	8f 91       	pop	r24
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
