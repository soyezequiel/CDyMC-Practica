
ej10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000160  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a8  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000626  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000233  00000000  00000000  00000ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000355  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001495  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000014d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/interrupt.h>
volatile uint8_t cont;

int main()
{
	DDRB |= 0x01;	
  90:	84 b1       	in	r24, 0x04	; 4
  92:	81 60       	ori	r24, 0x01	; 1
  94:	84 b9       	out	0x04, r24	; 4
	cont=0;
  96:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	//OCR0A=125;				//Comparador, cuando el contador sea igual a 125 ocurre la señal del comparador
	//TCCR0A=0x02;			//Modo CTC, clk interno, con preescalador
	TCCR0A=0x00;			//Modo Normal, CLK interno, con preescalador de 1024
  9a:	14 bc       	out	0x24, r1	; 36
	TCCR0B=0x05;
  9c:	85 e0       	ldi	r24, 0x05	; 5
  9e:	85 bd       	out	0x25, r24	; 37
	TIFR0=0x01;				//notificacion cuando hay overflow
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	85 bb       	out	0x15, r24	; 21
	
	//TIMSK0=(1<< OCIE0A);	//Habilita la interrupcion cuando el contador llega a igualar el comparador 
	TIMSK0=(1<< TOIE0);		//Habilita la interrupcion cuando el contador hace overflow
  a4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	sei();
  a8:	78 94       	sei
	
	DDRC=0x00;
  aa:	17 b8       	out	0x07, r1	; 7
	DDRD=0xFF;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	8a b9       	out	0x0a, r24	; 10
    while (1){
		 if(cont>=3){
  b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	e0 f3       	brcs	.-8      	; 0xb0 <main+0x20>
			 cont=0;
  b8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			 PORTB^=0x01; // OR exclusiba el bit 0 del puerto B
  bc:	95 b1       	in	r25, 0x05	; 5
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	89 27       	eor	r24, r25
  c2:	85 b9       	out	0x05, r24	; 5
  c4:	f5 cf       	rjmp	.-22     	; 0xb0 <main+0x20>

000000c6 <__vector_16>:
	}			//Super loop

}

	ISR(TIMER0_OVF_vect)	//El vector de interrupcion es la comparacion del "Canal A" del "Timer 0"
	{
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	8f 93       	push	r24
		 cont=cont+1;		
  d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
