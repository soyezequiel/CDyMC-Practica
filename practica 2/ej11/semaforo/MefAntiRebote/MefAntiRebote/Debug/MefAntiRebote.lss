
MefAntiRebote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000228  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000909  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077d  00000000  00000000  00000c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042c  00000000  00000000  0000138e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  000017bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044c  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000002f  00000000  00000000  00001cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001ceb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c1 00 	call	0x182	; 0x182 <main>
  88:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <isBottonBajo>:
	volatile uint8_t isPresionado;
	
	//funciones
	//con pull up activado
	uint8_t isBottonBajo(){		
			if(PIN&(1<<NUM_PIN)){
  90:	19 9b       	sbis	0x03, 1	; 3
  92:	02 c0       	rjmp	.+4      	; 0x98 <isBottonBajo+0x8>
				return 0;
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	08 95       	ret
			} else return 1;
  98:	81 e0       	ldi	r24, 0x01	; 1
	}
  9a:	08 95       	ret

0000009c <conf_PORTB>:
void conf_PORTB(){
	PORT_CONF&=~(1<<NUM_PIN);
  9c:	84 b1       	in	r24, 0x04	; 4
  9e:	8d 7f       	andi	r24, 0xFD	; 253
  a0:	84 b9       	out	0x04, r24	; 4
	PORT|=(1<<NUM_PIN); //activo pull-up
  a2:	85 b1       	in	r24, 0x05	; 5
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	85 b9       	out	0x05, r24	; 5
  a8:	08 95       	ret

000000aa <BUTTON_Init>:
}

//publicas
	//funciones
	void BUTTON_Init(void){
		conf_PORTB();
  aa:	0e 94 4e 00 	call	0x9c	; 0x9c <conf_PORTB>
		Button_Estate=UP;
  ae:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <Button_Estate>
		isPresionado=0;
  b2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <isPresionado>
		tiempo=0;
  b6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  ba:	08 95       	ret

000000bc <BUTTON_Update>:
	}

	void BUTTON_Update(void){
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
		switch(Button_Estate){
  c0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Button_Estate>
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	89 f0       	breq	.+34     	; 0xea <BUTTON_Update+0x2e>
  c8:	28 f0       	brcs	.+10     	; 0xd4 <BUTTON_Update+0x18>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	49 f1       	breq	.+82     	; 0x120 <BUTTON_Update+0x64>
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	81 f1       	breq	.+96     	; 0x132 <BUTTON_Update+0x76>
  d2:	49 c0       	rjmp	.+146    	; 0x166 <BUTTON_Update+0xaa>
			case UP:
				if(isBottonBajo()){
  d4:	0e 94 48 00 	call	0x90	; 0x90 <isBottonBajo>
  d8:	88 23       	and	r24, r24
  da:	09 f4       	brne	.+2      	; 0xde <BUTTON_Update+0x22>
  dc:	44 c0       	rjmp	.+136    	; 0x166 <BUTTON_Update+0xaa>
					Button_Estate=FALLING;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Button_Estate>
					isPresionado=0;			
  e4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <isPresionado>
  e8:	3e c0       	rjmp	.+124    	; 0x166 <BUTTON_Update+0xaa>
				}
			break;
			
			case FALLING:
				if((++tiempo==BUTTON_DURATION)&(isBottonBajo())){				
  ea:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ee:	9f 5f       	subi	r25, 0xFF	; 255
  f0:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
  f4:	c1 e0       	ldi	r28, 0x01	; 1
  f6:	d0 e0       	ldi	r29, 0x00	; 0
  f8:	94 31       	cpi	r25, 0x14	; 20
  fa:	11 f0       	breq	.+4      	; 0x100 <BUTTON_Update+0x44>
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	0e 94 48 00 	call	0x90	; 0x90 <isBottonBajo>
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	c8 23       	and	r28, r24
 108:	d9 23       	and	r29, r25
 10a:	cd 2b       	or	r28, r29
 10c:	61 f1       	breq	.+88     	; 0x166 <BUTTON_Update+0xaa>
					Button_Estate=DOWN;	
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Button_Estate>
					isPresionado=1;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <isPresionado>
					tiempo=0;	
 11a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 11e:	23 c0       	rjmp	.+70     	; 0x166 <BUTTON_Update+0xaa>
				}
			break;
			
			case DOWN:
				if(~(isBottonBajo())){
 120:	0e 94 48 00 	call	0x90	; 0x90 <isBottonBajo>
					Button_Estate=RAISING;
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Button_Estate>
					isPresionado=1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <isPresionado>
 130:	1a c0       	rjmp	.+52     	; 0x166 <BUTTON_Update+0xaa>
				}
			break;
			
			case RAISING:
				if((++tiempo==BUTTON_DURATION)&(~(isBottonBajo()))){
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 136:	8f 5f       	subi	r24, 0xFF	; 255
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 13c:	c1 e0       	ldi	r28, 0x01	; 1
 13e:	d0 e0       	ldi	r29, 0x00	; 0
 140:	84 31       	cpi	r24, 0x14	; 20
 142:	11 f0       	breq	.+4      	; 0x148 <BUTTON_Update+0x8c>
 144:	c0 e0       	ldi	r28, 0x00	; 0
 146:	d0 e0       	ldi	r29, 0x00	; 0
 148:	0e 94 48 00 	call	0x90	; 0x90 <isBottonBajo>
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	80 95       	com	r24
 150:	90 95       	com	r25
 152:	8c 23       	and	r24, r28
 154:	9d 23       	and	r25, r29
 156:	89 2b       	or	r24, r25
 158:	31 f0       	breq	.+12     	; 0x166 <BUTTON_Update+0xaa>
					Button_Estate=UP;
 15a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <Button_Estate>
					isPresionado=0;
 15e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <isPresionado>
					tiempo=0;
 162:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				}
			break;
		}
	}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <BUTTON_Presionado>:
	
	uint8_t BUTTON_Presionado(){
		return isPresionado;
 16c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <isPresionado>
 170:	08 95       	ret

00000172 <encender_Led>:
#include "button.h"
#define F_CPU 8000000L
#include <util/delay.h>

void encender_Led(){
	PORTB|=(1<<PB2);
 172:	85 b1       	in	r24, 0x05	; 5
 174:	84 60       	ori	r24, 0x04	; 4
 176:	85 b9       	out	0x05, r24	; 5
 178:	08 95       	ret

0000017a <apagar_Led>:
}
void apagar_Led(){
	PORTB&=~(1<<PB2);
 17a:	85 b1       	in	r24, 0x05	; 5
 17c:	8b 7f       	andi	r24, 0xFB	; 251
 17e:	85 b9       	out	0x05, r24	; 5
 180:	08 95       	ret

00000182 <main>:
}

int main(void)
{
    BUTTON_Init();
 182:	0e 94 55 00 	call	0xaa	; 0xaa <BUTTON_Init>
    while (1) 
    {
		
		DDRB|=(1<<PB2);
 186:	84 b1       	in	r24, 0x04	; 4
 188:	84 60       	ori	r24, 0x04	; 4
 18a:	84 b9       	out	0x04, r24	; 4
		BUTTON_Update();
 18c:	0e 94 5e 00 	call	0xbc	; 0xbc <BUTTON_Update>
		if(BUTTON_Presionado()){
 190:	0e 94 b6 00 	call	0x16c	; 0x16c <BUTTON_Presionado>
 194:	88 23       	and	r24, r24
 196:	19 f0       	breq	.+6      	; 0x19e <main+0x1c>
			encender_Led();
 198:	0e 94 b9 00 	call	0x172	; 0x172 <encender_Led>
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <main+0x20>
		}else {
			apagar_Led();
 19e:	0e 94 bd 00 	call	0x17a	; 0x17a <apagar_Led>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	8f ec       	ldi	r24, 0xCF	; 207
 1a4:	97 e0       	ldi	r25, 0x07	; 7
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <main+0x24>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0x2a>
 1ac:	00 00       	nop
 1ae:	eb cf       	rjmp	.-42     	; 0x186 <main+0x4>

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
