
semaforo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000294  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000308  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e3  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c4  00000000  00000000  00000dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041d  00000000  00000000  0000157f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  0000199c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000442  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000004f  00000000  00000000  00001e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001ebd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 48 01 	jmp	0x290	; 0x290 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <util/delay.h>


int main(void)
{
	TRAFIC_LIGHT_Init(RED); //inicializa la MEF
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	0e 94 7b 00 	call	0xf6	; 0xf6 <TRAFIC_LIGHT_Init>
	while(1){
		TRAFIC_LIGHT_Update();
  96:	0e 94 8b 00 	call	0x116	; 0x116 <TRAFIC_LIGHT_Update>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	89 e6       	ldi	r24, 0x69	; 105
  9e:	98 e1       	ldi	r25, 0x18	; 24
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x10>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x1a>
  aa:	00 00       	nop
  ac:	f4 cf       	rjmp	.-24     	; 0x96 <main+0x6>

000000ae <light_On>:
	//VARIABLES 
	static eLight_State Light_state; //Estado actual del sistema
	static long	Time_in_state; // tiempo en el estado
	//Funciones para las luces
	void light_On(uint8_t port_led){
		PORT |= (1<<port_led);
  ae:	95 b1       	in	r25, 0x05	; 5
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <light_On+0xc>
  b6:	22 0f       	add	r18, r18
  b8:	33 1f       	adc	r19, r19
  ba:	8a 95       	dec	r24
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <light_On+0x8>
  be:	29 2b       	or	r18, r25
  c0:	25 b9       	out	0x05, r18	; 5
  c2:	08 95       	ret

000000c4 <light_Off>:
	}
	void light_Off(uint8_t port_led){
		PORT &= ~(1<<port_led);
  c4:	95 b1       	in	r25, 0x05	; 5
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <light_Off+0xc>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	8a 95       	dec	r24
  d2:	e2 f7       	brpl	.-8      	; 0xcc <light_Off+0x8>
  d4:	20 95       	com	r18
  d6:	29 23       	and	r18, r25
  d8:	25 b9       	out	0x05, r18	; 5
  da:	08 95       	ret

000000dc <CONFIG_Light>:
	}
	void CONFIG_Light(){
		PORT_CONF|=((1<<PORT_RED)|(1<<PORT_AMBER)|(1<<PORT_GREEN));
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	80 6e       	ori	r24, 0xE0	; 224
  e0:	84 b9       	out	0x04, r24	; 4
		light_Off(PORT_RED);
  e2:	85 e0       	ldi	r24, 0x05	; 5
  e4:	0e 94 62 00 	call	0xc4	; 0xc4 <light_Off>
		light_Off(PORT_AMBER);
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	0e 94 62 00 	call	0xc4	; 0xc4 <light_Off>
		light_Off(PORT_GREEN);
  ee:	87 e0       	ldi	r24, 0x07	; 7
  f0:	0e 94 62 00 	call	0xc4	; 0xc4 <light_Off>
  f4:	08 95       	ret

000000f6 <TRAFIC_LIGHT_Init>:
	}
//Publicas
	//Funciones
	void TRAFIC_LIGHT_Init(eLight_State START_STATE){
  f6:	cf 93       	push	r28
  f8:	c8 2f       	mov	r28, r24
		CONFIG_Light();
  fa:	0e 94 6e 00 	call	0xdc	; 0xdc <CONFIG_Light>
		Light_state=START_STATE; //poner un estado inicial	
  fe:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <Light_state>
		Time_in_state=0;
 102:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 106:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 10e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	}
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <TRAFIC_LIGHT_Update>:
	void TRAFIC_LIGHT_Update(void){
		switch(Light_state){
 116:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Light_state>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	a9 f1       	breq	.+106    	; 0x188 <TRAFIC_LIGHT_Update+0x72>
 11e:	38 f0       	brcs	.+14     	; 0x12e <TRAFIC_LIGHT_Update+0x18>
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	09 f4       	brne	.+2      	; 0x126 <TRAFIC_LIGHT_Update+0x10>
 124:	5e c0       	rjmp	.+188    	; 0x1e2 <TRAFIC_LIGHT_Update+0xcc>
 126:	83 30       	cpi	r24, 0x03	; 3
 128:	09 f4       	brne	.+2      	; 0x12c <TRAFIC_LIGHT_Update+0x16>
 12a:	87 c0       	rjmp	.+270    	; 0x23a <TRAFIC_LIGHT_Update+0x124>
 12c:	08 95       	ret
			case RED:
				//actualizar salida
				light_On(PORT_RED);
 12e:	85 e0       	ldi	r24, 0x05	; 5
 130:	0e 94 57 00 	call	0xae	; 0xae <light_On>
				light_Off(PORT_AMBER);
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	0e 94 62 00 	call	0xc4	; 0xc4 <light_Off>
				light_Off(PORT_GREEN);
 13a:	87 e0       	ldi	r24, 0x07	; 7
 13c:	0e 94 62 00 	call	0xc4	; 0xc4 <light_Off>
				//Cambio de estado
				if(++Time_in_state==RED_DURATION){
 140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 144:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 148:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 14c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	a1 1d       	adc	r26, r1
 154:	b1 1d       	adc	r27, r1
 156:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 15a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 15e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 162:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 166:	44 97       	sbiw	r24, 0x14	; 20
 168:	a1 05       	cpc	r26, r1
 16a:	b1 05       	cpc	r27, r1
 16c:	09 f0       	breq	.+2      	; 0x170 <TRAFIC_LIGHT_Update+0x5a>
 16e:	8f c0       	rjmp	.+286    	; 0x28e <TRAFIC_LIGHT_Update+0x178>
					Light_state=RED_AMBER;				
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Light_state>
					Time_in_state=0;
 176:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 17a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 182:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 186:	08 95       	ret
				}
				break;
			case RED_AMBER:
				//actualizar salida
				light_On(PORT_RED);
 188:	85 e0       	ldi	r24, 0x05	; 5
 18a:	0e 94 57 00 	call	0xae	; 0xae <light_On>
				light_On(PORT_AMBER);
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	0e 94 57 00 	call	0xae	; 0xae <light_On>
				light_Off(PORT_GREEN);
 194:	87 e0       	ldi	r24, 0x07	; 7
 196:	0e 94 62 00 	call	0xc4	; 0xc4 <light_Off>
			
				if(++Time_in_state==RED_AMBER_DURATION){
 19a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1a6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	a1 1d       	adc	r26, r1
 1ae:	b1 1d       	adc	r27, r1
 1b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1bc:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1c0:	05 97       	sbiw	r24, 0x05	; 5
 1c2:	a1 05       	cpc	r26, r1
 1c4:	b1 05       	cpc	r27, r1
 1c6:	09 f0       	breq	.+2      	; 0x1ca <TRAFIC_LIGHT_Update+0xb4>
 1c8:	62 c0       	rjmp	.+196    	; 0x28e <TRAFIC_LIGHT_Update+0x178>
					Light_state=GREEN;
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Light_state>
					Time_in_state=0;
 1d0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1dc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1e0:	08 95       	ret
				}
				break;
			case GREEN:
				//actualizar salida
				light_Off(PORT_RED);
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	0e 94 62 00 	call	0xc4	; 0xc4 <light_Off>
				light_Off(PORT_AMBER);
 1e8:	86 e0       	ldi	r24, 0x06	; 6
 1ea:	0e 94 62 00 	call	0xc4	; 0xc4 <light_Off>

				light_On(PORT_GREEN);
 1ee:	87 e0       	ldi	r24, 0x07	; 7
 1f0:	0e 94 57 00 	call	0xae	; 0xae <light_On>
				if(++Time_in_state==GREEN_DURATION){
 1f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1fc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 200:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 204:	01 96       	adiw	r24, 0x01	; 1
 206:	a1 1d       	adc	r26, r1
 208:	b1 1d       	adc	r27, r1
 20a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 20e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 212:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 216:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 21a:	4e 97       	sbiw	r24, 0x1e	; 30
 21c:	a1 05       	cpc	r26, r1
 21e:	b1 05       	cpc	r27, r1
 220:	b1 f5       	brne	.+108    	; 0x28e <TRAFIC_LIGHT_Update+0x178>
					Light_state=AMBER;
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Light_state>
					Time_in_state=0;
 228:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 22c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 230:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 234:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 238:	08 95       	ret
				}
				break;
			case AMBER:
				//actualizar salida
				light_Off(PORT_RED);
 23a:	85 e0       	ldi	r24, 0x05	; 5
 23c:	0e 94 62 00 	call	0xc4	; 0xc4 <light_Off>
				light_On(PORT_AMBER);
 240:	86 e0       	ldi	r24, 0x06	; 6
 242:	0e 94 57 00 	call	0xae	; 0xae <light_On>
				light_Off(PORT_GREEN);
 246:	87 e0       	ldi	r24, 0x07	; 7
 248:	0e 94 62 00 	call	0xc4	; 0xc4 <light_Off>
				if(++Time_in_state==AMBER_DURATION){
 24c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 250:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 254:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 258:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	a1 1d       	adc	r26, r1
 260:	b1 1d       	adc	r27, r1
 262:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 266:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 26a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 26e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 272:	05 97       	sbiw	r24, 0x05	; 5
 274:	a1 05       	cpc	r26, r1
 276:	b1 05       	cpc	r27, r1
 278:	51 f4       	brne	.+20     	; 0x28e <TRAFIC_LIGHT_Update+0x178>
					Light_state=RED;
 27a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <Light_state>
					Time_in_state=0;
 27e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 282:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 286:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 28a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 28e:	08 95       	ret

00000290 <_exit>:
 290:	f8 94       	cli

00000292 <__stop_program>:
 292:	ff cf       	rjmp	.-2      	; 0x292 <__stop_program>
