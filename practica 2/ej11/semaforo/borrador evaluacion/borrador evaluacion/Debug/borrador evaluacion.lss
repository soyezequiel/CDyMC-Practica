
borrador evaluacion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000078b  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063d  00000000  00000000  0000098f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a9  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001278  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000455  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a7  00000000  00000000  0000175d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 56 00 	call	0xac	; 0xac <main>
  78:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <indicador_para_la_realizacion_de_la_captura_en_modo_entrada>:
 */ 

#include <avr/io.h>

void indicador_para_la_realizacion_de_la_captura_en_modo_entrada(){
	DDRB&= ~(1<<PB0); 
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8e 7f       	andi	r24, 0xFE	; 254
  84:	84 b9       	out	0x04, r24	; 4
  86:	08 95       	ret

00000088 <TIMER1_modo_normal>:
}
void TIMER1_modo_normal(){
	TCCR1A=0;	
  88:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  8c:	08 95       	ret

0000008e <TIMER1_modo_flanco_no_preescaler>:
}
void TIMER1_modo_flanco_no_preescaler(){
	TCCR1B=(1<<ICES1)|(1<<CS10);
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  94:	08 95       	ret

00000096 <indicador_de_captura_ya_realizada>:
}
uint8_t indicador_de_captura_ya_realizada(){
	return TIFR1 & (1<<ICF1);
  96:	86 b3       	in	r24, 0x16	; 22
}
  98:	80 72       	andi	r24, 0x20	; 32
  9a:	08 95       	ret

0000009c <reiniciar_indicador_de_captura_ya_realizada>:
void reiniciar_indicador_de_captura_ya_realizada(){
	TIFR1=(1<<ICF1);
  9c:	80 e2       	ldi	r24, 0x20	; 32
  9e:	86 bb       	out	0x16, r24	; 22
  a0:	08 95       	ret

000000a2 <get_resguardo_del_tiempo>:
}
uint16_t get_resguardo_del_tiempo(){
	return ICR1;
  a2:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  a6:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
}
  aa:	08 95       	ret

000000ac <main>:
int main(void)
{
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
	uint16_t ciclos_inicial,ciclos_final,ciclos_de_pulso;
	indicador_para_la_realizacion_de_la_captura_en_modo_entrada();
  b0:	0e 94 40 00 	call	0x80	; 0x80 <indicador_para_la_realizacion_de_la_captura_en_modo_entrada>
	TIMER1_modo_normal();
  b4:	0e 94 44 00 	call	0x88	; 0x88 <TIMER1_modo_normal>
	TIMER1_modo_flanco_no_preescaler();	
  b8:	0e 94 47 00 	call	0x8e	; 0x8e <TIMER1_modo_flanco_no_preescaler>
	while (indicador_de_captura_ya_realizada()==0);	
  bc:	0e 94 4b 00 	call	0x96	; 0x96 <indicador_de_captura_ya_realizada>
  c0:	88 23       	and	r24, r24
  c2:	e1 f3       	breq	.-8      	; 0xbc <main+0x10>
	ciclos_inicial=get_resguardo_del_tiempo();
  c4:	0e 94 51 00 	call	0xa2	; 0xa2 <get_resguardo_del_tiempo>
  c8:	ec 01       	movw	r28, r24
	reiniciar_indicador_de_captura_ya_realizada();
  ca:	0e 94 4e 00 	call	0x9c	; 0x9c <reiniciar_indicador_de_captura_ya_realizada>
	while (indicador_de_captura_ya_realizada()==0);
  ce:	0e 94 4b 00 	call	0x96	; 0x96 <indicador_de_captura_ya_realizada>
  d2:	88 23       	and	r24, r24
  d4:	e1 f3       	breq	.-8      	; 0xce <main+0x22>
	ciclos_final=get_resguardo_del_tiempo();
  d6:	0e 94 51 00 	call	0xa2	; 0xa2 <get_resguardo_del_tiempo>
	ciclos_de_pulso=ciclos_final-ciclos_inicial;
  da:	8c 1b       	sub	r24, r28
  dc:	9d 0b       	sbc	r25, r29
  de:	ec 01       	movw	r28, r24
	reiniciar_indicador_de_captura_ya_realizada();
  e0:	0e 94 4e 00 	call	0x9c	; 0x9c <reiniciar_indicador_de_captura_ya_realizada>
	return ciclos_de_pulso;
}
  e4:	ce 01       	movw	r24, r28
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
