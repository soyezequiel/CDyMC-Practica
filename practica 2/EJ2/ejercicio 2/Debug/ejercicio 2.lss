
ejercicio 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000374  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000374  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000132c  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000092d  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000090b  00000000  00000000  000021ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  00002ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000557  00000000  00000000  00002d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e73  00000000  00000000  0000327f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  000040f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e4 e7       	ldi	r30, 0x74	; 116
  bc:	f3 e0       	ldi	r31, 0x03	; 3
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a4 31       	cpi	r26, 0x14	; 20
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	a4 e1       	ldi	r26, 0x14	; 20
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a4 31       	cpi	r26, 0x14	; 20
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 b3 01 	call	0x366	; 0x366 <main>
  de:	0c 94 b8 01 	jmp	0x370	; 0x370 <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
  e6:	98 2f       	mov	r25, r24
  e8:	90 7f       	andi	r25, 0xF0	; 240
  ea:	95 b9       	out	0x05, r25	; 5
  ec:	95 b1       	in	r25, 0x05	; 5
  ee:	91 60       	ori	r25, 0x01	; 1
  f0:	95 b9       	out	0x05, r25	; 5
  f2:	95 b1       	in	r25, 0x05	; 5
  f4:	94 60       	ori	r25, 0x04	; 4
  f6:	95 b9       	out	0x05, r25	; 5
  f8:	2a e6       	ldi	r18, 0x6A	; 106
  fa:	2a 95       	dec	r18
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCDsendChar+0x14>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCDsendChar+0x1a>
 100:	95 b1       	in	r25, 0x05	; 5
 102:	9b 7f       	andi	r25, 0xFB	; 251
 104:	95 b9       	out	0x05, r25	; 5
 106:	95 b1       	in	r25, 0x05	; 5
 108:	9e 7f       	andi	r25, 0xFE	; 254
 10a:	95 b9       	out	0x05, r25	; 5
 10c:	9a e6       	ldi	r25, 0x6A	; 106
 10e:	9a 95       	dec	r25
 110:	f1 f7       	brne	.-4      	; 0x10e <LCDsendChar+0x28>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCDsendChar+0x2e>
 114:	20 e1       	ldi	r18, 0x10	; 16
 116:	82 9f       	mul	r24, r18
 118:	c0 01       	movw	r24, r0
 11a:	11 24       	eor	r1, r1
 11c:	85 b9       	out	0x05, r24	; 5
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	81 60       	ori	r24, 0x01	; 1
 122:	85 b9       	out	0x05, r24	; 5
 124:	85 b1       	in	r24, 0x05	; 5
 126:	84 60       	ori	r24, 0x04	; 4
 128:	85 b9       	out	0x05, r24	; 5
 12a:	8a e6       	ldi	r24, 0x6A	; 106
 12c:	8a 95       	dec	r24
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCDsendChar+0x46>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCDsendChar+0x4c>
 132:	85 b1       	in	r24, 0x05	; 5
 134:	8b 7f       	andi	r24, 0xFB	; 251
 136:	85 b9       	out	0x05, r24	; 5
 138:	85 b1       	in	r24, 0x05	; 5
 13a:	8e 7f       	andi	r24, 0xFE	; 254
 13c:	85 b9       	out	0x05, r24	; 5
 13e:	9a e6       	ldi	r25, 0x6A	; 106
 140:	9a 95       	dec	r25
 142:	f1 f7       	brne	.-4      	; 0x140 <LCDsendChar+0x5a>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LCDsendChar+0x60>
 146:	08 95       	ret

00000148 <LCDsendCommand>:
 148:	98 2f       	mov	r25, r24
 14a:	90 7f       	andi	r25, 0xF0	; 240
 14c:	95 b9       	out	0x05, r25	; 5
 14e:	95 b1       	in	r25, 0x05	; 5
 150:	94 60       	ori	r25, 0x04	; 4
 152:	95 b9       	out	0x05, r25	; 5
 154:	ef ec       	ldi	r30, 0xCF	; 207
 156:	f7 e0       	ldi	r31, 0x07	; 7
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCDsendCommand+0x10>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCDsendCommand+0x16>
 15e:	00 00       	nop
 160:	95 b1       	in	r25, 0x05	; 5
 162:	9b 7f       	andi	r25, 0xFB	; 251
 164:	95 b9       	out	0x05, r25	; 5
 166:	ef ec       	ldi	r30, 0xCF	; 207
 168:	f7 e0       	ldi	r31, 0x07	; 7
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCDsendCommand+0x22>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCDsendCommand+0x28>
 170:	00 00       	nop
 172:	f0 e1       	ldi	r31, 0x10	; 16
 174:	8f 9f       	mul	r24, r31
 176:	c0 01       	movw	r24, r0
 178:	11 24       	eor	r1, r1
 17a:	85 b9       	out	0x05, r24	; 5
 17c:	85 b1       	in	r24, 0x05	; 5
 17e:	84 60       	ori	r24, 0x04	; 4
 180:	85 b9       	out	0x05, r24	; 5
 182:	8f ec       	ldi	r24, 0xCF	; 207
 184:	97 e0       	ldi	r25, 0x07	; 7
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCDsendCommand+0x3e>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCDsendCommand+0x44>
 18c:	00 00       	nop
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	8b 7f       	andi	r24, 0xFB	; 251
 192:	85 b9       	out	0x05, r24	; 5
 194:	ef ec       	ldi	r30, 0xCF	; 207
 196:	f7 e0       	ldi	r31, 0x07	; 7
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCDsendCommand+0x50>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCDsendCommand+0x56>
 19e:	00 00       	nop
 1a0:	08 95       	ret

000001a2 <LCDstring>:
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	00 97       	sbiw	r24, 0x00	; 0
 1ac:	69 f0       	breq	.+26     	; 0x1c8 <LCDstring+0x26>
 1ae:	d6 2f       	mov	r29, r22
 1b0:	8c 01       	movw	r16, r24
 1b2:	c0 e0       	ldi	r28, 0x00	; 0
 1b4:	07 c0       	rjmp	.+14     	; 0x1c4 <LCDstring+0x22>
 1b6:	f8 01       	movw	r30, r16
 1b8:	ec 0f       	add	r30, r28
 1ba:	f1 1d       	adc	r31, r1
 1bc:	80 81       	ld	r24, Z
 1be:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDsendChar>
 1c2:	cf 5f       	subi	r28, 0xFF	; 255
 1c4:	cd 17       	cp	r28, r29
 1c6:	b8 f3       	brcs	.-18     	; 0x1b6 <LCDstring+0x14>
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

000001d2 <LCDGotoXY>:
 1d2:	62 30       	cpi	r22, 0x02	; 2
 1d4:	31 f0       	breq	.+12     	; 0x1e2 <LCDGotoXY+0x10>
 1d6:	63 30       	cpi	r22, 0x03	; 3
 1d8:	31 f0       	breq	.+12     	; 0x1e6 <LCDGotoXY+0x14>
 1da:	61 30       	cpi	r22, 0x01	; 1
 1dc:	29 f4       	brne	.+10     	; 0x1e8 <LCDGotoXY+0x16>
 1de:	80 5c       	subi	r24, 0xC0	; 192
 1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <LCDGotoXY+0x16>
 1e2:	8c 5e       	subi	r24, 0xEC	; 236
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <LCDGotoXY+0x16>
 1e6:	8c 5a       	subi	r24, 0xAC	; 172
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	0e 94 a4 00 	call	0x148	; 0x148 <LCDsendCommand>
 1ee:	08 95       	ret

000001f0 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 1f0:	ef 92       	push	r14
 1f2:	ff 92       	push	r15
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	7c 01       	movw	r14, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 1fe:	86 2f       	mov	r24, r22
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	80 64       	ori	r24, 0x40	; 64
	for (i=0; i<8; i++){
 210:	c0 e0       	ldi	r28, 0x00	; 0
 212:	d0 e0       	ldi	r29, 0x00	; 0
 214:	0d c0       	rjmp	.+26     	; 0x230 <LCDdefinechar+0x40>
		pcc=pgm_read_byte(&pc[i]);
 216:	f7 01       	movw	r30, r14
 218:	ec 0f       	add	r30, r28
 21a:	fd 1f       	adc	r31, r29
 21c:	14 91       	lpm	r17, Z
		LCDsendCommand(a++);
 21e:	01 e0       	ldi	r16, 0x01	; 1
 220:	08 0f       	add	r16, r24
 222:	0e 94 a4 00 	call	0x148	; 0x148 <LCDsendCommand>
		LCDsendChar(pcc);
 226:	81 2f       	mov	r24, r17
 228:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 22c:	21 96       	adiw	r28, 0x01	; 1
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 22e:	80 2f       	mov	r24, r16
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 230:	c8 30       	cpi	r28, 0x08	; 8
 232:	d1 05       	cpc	r29, r1
 234:	80 f3       	brcs	.-32     	; 0x216 <LCDdefinechar+0x26>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	ff 90       	pop	r15
 240:	ef 90       	pop	r14
 242:	08 95       	ret

00000244 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	8f e2       	ldi	r24, 0x2F	; 47
 24a:	95 e7       	ldi	r25, 0x75	; 117
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <LCDinit+0x8>
 250:	00 c0       	rjmp	.+0      	; 0x252 <LCDinit+0xe>
 252:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 254:	15 b8       	out	0x05, r1	; 5
	LCP=0x00;
 256:	15 b8       	out	0x05, r1	; 5
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 258:	84 b1       	in	r24, 0x04	; 4
 25a:	80 6f       	ori	r24, 0xF0	; 240
 25c:	84 b9       	out	0x04, r24	; 4
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 25e:	84 b1       	in	r24, 0x04	; 4
 260:	87 60       	ori	r24, 0x07	; 7
 262:	84 b9       	out	0x04, r24	; 4
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 264:	90 e3       	ldi	r25, 0x30	; 48
 266:	95 b9       	out	0x05, r25	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 268:	85 b1       	in	r24, 0x05	; 5
 26a:	84 60       	ori	r24, 0x04	; 4
 26c:	85 b9       	out	0x05, r24	; 5
 26e:	ef ec       	ldi	r30, 0xCF	; 207
 270:	f7 e0       	ldi	r31, 0x07	; 7
 272:	31 97       	sbiw	r30, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <LCDinit+0x2e>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCDinit+0x34>
 278:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 27a:	85 b1       	in	r24, 0x05	; 5
 27c:	8b 7f       	andi	r24, 0xFB	; 251
 27e:	85 b9       	out	0x05, r24	; 5
 280:	ef ec       	ldi	r30, 0xCF	; 207
 282:	f7 e0       	ldi	r31, 0x07	; 7
 284:	31 97       	sbiw	r30, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <LCDinit+0x40>
 288:	00 c0       	rjmp	.+0      	; 0x28a <LCDinit+0x46>
 28a:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 28c:	95 b9       	out	0x05, r25	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 28e:	85 b1       	in	r24, 0x05	; 5
 290:	84 60       	ori	r24, 0x04	; 4
 292:	85 b9       	out	0x05, r24	; 5
 294:	8f ec       	ldi	r24, 0xCF	; 207
 296:	97 e0       	ldi	r25, 0x07	; 7
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <LCDinit+0x54>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <LCDinit+0x5a>
 29e:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2a0:	85 b1       	in	r24, 0x05	; 5
 2a2:	8b 7f       	andi	r24, 0xFB	; 251
 2a4:	85 b9       	out	0x05, r24	; 5
 2a6:	ef ec       	ldi	r30, 0xCF	; 207
 2a8:	f7 e0       	ldi	r31, 0x07	; 7
 2aa:	31 97       	sbiw	r30, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCDinit+0x66>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <LCDinit+0x6c>
 2b0:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 2b2:	80 e2       	ldi	r24, 0x20	; 32
 2b4:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2b6:	85 b1       	in	r24, 0x05	; 5
 2b8:	84 60       	ori	r24, 0x04	; 4
 2ba:	85 b9       	out	0x05, r24	; 5
 2bc:	8f ec       	ldi	r24, 0xCF	; 207
 2be:	97 e0       	ldi	r25, 0x07	; 7
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <LCDinit+0x7c>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <LCDinit+0x82>
 2c6:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2c8:	85 b1       	in	r24, 0x05	; 5
 2ca:	8b 7f       	andi	r24, 0xFB	; 251
 2cc:	85 b9       	out	0x05, r24	; 5
 2ce:	ef ec       	ldi	r30, 0xCF	; 207
 2d0:	f7 e0       	ldi	r31, 0x07	; 7
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <LCDinit+0x8e>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <LCDinit+0x94>
 2d8:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 2da:	88 e2       	ldi	r24, 0x28	; 40
 2dc:	0e 94 a4 00 	call	0x148	; 0x148 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 2e0:	8c e0       	ldi	r24, 0x0C	; 12
 2e2:	0e 94 a4 00 	call	0x148	; 0x148 <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	c0 e0       	ldi	r28, 0x00	; 0
	while(ch<64)
 2ea:	0a c0       	rjmp	.+20     	; 0x300 <LCDinit+0xbc>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 2ec:	d1 e0       	ldi	r29, 0x01	; 1
 2ee:	d6 0f       	add	r29, r22
 2f0:	8c 2f       	mov	r24, r28
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	88 59       	subi	r24, 0x98	; 152
 2f6:	9f 4f       	sbci	r25, 0xFF	; 255
 2f8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCDdefinechar>
		ch=ch+8;
 2fc:	c8 5f       	subi	r28, 0xF8	; 248
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 2fe:	6d 2f       	mov	r22, r29
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 300:	c0 34       	cpi	r28, 0x40	; 64
 302:	a0 f3       	brcs	.-24     	; 0x2ec <LCDinit+0xa8>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <testeoLCD>:
			_delay_ms(10);
		}	
}

void testeoLCD(void)
{
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
 312:	64 97       	sbiw	r28, 0x14	; 20
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	f8 94       	cli
 318:	de bf       	out	0x3e, r29	; 62
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	cd bf       	out	0x3d, r28	; 61
			LCDinit();
 31e:	0e 94 22 01 	call	0x244	; 0x244 <LCDinit>
			LCDGotoXY(0,0);
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCDGotoXY>
			uint8_t texto[20]="testeo";
 32a:	87 e0       	ldi	r24, 0x07	; 7
 32c:	e0 e0       	ldi	r30, 0x00	; 0
 32e:	f1 e0       	ldi	r31, 0x01	; 1
 330:	de 01       	movw	r26, r28
 332:	11 96       	adiw	r26, 0x01	; 1
 334:	01 90       	ld	r0, Z+
 336:	0d 92       	st	X+, r0
 338:	8a 95       	dec	r24
 33a:	e1 f7       	brne	.-8      	; 0x334 <testeoLCD+0x2a>
 33c:	fe 01       	movw	r30, r28
 33e:	38 96       	adiw	r30, 0x08	; 8
 340:	8d e0       	ldi	r24, 0x0D	; 13
 342:	df 01       	movw	r26, r30
 344:	1d 92       	st	X+, r1
 346:	8a 95       	dec	r24
 348:	e9 f7       	brne	.-6      	; 0x344 <testeoLCD+0x3a>
			LCDstring(texto,20);	;
 34a:	64 e1       	ldi	r22, 0x14	; 20
 34c:	ce 01       	movw	r24, r28
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCDstring>
}
 354:	64 96       	adiw	r28, 0x14	; 20
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	f8 94       	cli
 35a:	de bf       	out	0x3e, r29	; 62
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	cd bf       	out	0x3d, r28	; 61
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <main>:
int main(void)
{
	testeoLCD();
 366:	0e 94 85 01 	call	0x30a	; 0x30a <testeoLCD>
	return 0;
}
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	08 95       	ret

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>
